<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:wd-revenue="http://www.mulesoft.org/schema/mule/wd-revenue" xmlns:sap="http://www.mulesoft.org/schema/mule/sap" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.6.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd
http://www.mulesoft.org/schema/mule/wd-revenue http://www.mulesoft.org/schema/mule/wd-revenue/current/mule-wd-revenue.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">

	<data-mapper:config name="Salesforce_Account_to_DEBMAS01" transformationGraphPath="salesforce_account_to_debmas01.grf" doc:name="Salesforce_Account_to_DEBMAS01"/>
    <data-mapper:config name="CUSTOMER_GET_KTOKD_to_KTOKD" transformationGraphPath="customer_get_ktokd_to_ktokd.grf" doc:name="CUSTOMER_GET_KTOKD_to_KTOKD"/>
    <data-mapper:config name="BAPI_CUSTOMER_FIND_to_Customer" transformationGraphPath="bapi_customer_find_to_customer.grf" doc:name="BAPI_CUSTOMER_FIND_to_Customer"/>
    <data-mapper:config name="BAPI_CUSTOMER_GETINTNUMBER_to_Customr_Number" transformationGraphPath="bapi_customer_getintnumber_to_customr_number.grf" doc:name="BAPI_CUSTOMER_GETINTNUMBER_to_Customr_Number"/>
    <data-mapper:config name="List_Account__To_PutCustomerRequestType" transformationGraphPath="list_account__to_putcustomerrequesttype.grf" doc:name="List_Account__To_PutCustomerRequestType"/>
    
	<flow name="processAQueueObjectsToBatchFlow">
		<jms:inbound-endpoint topic="A" connector-ref="Active_MQ"
			doc:name="JMS Topic A">
			<jms:jmsmessage-to-object-transformer />
		</jms:inbound-endpoint>
		<collection-aggregator timeout="1000"
			failOnTimeout="false" doc:name="Collection Aggregator" />
		<batch:execute name="syncAccountsBatch" doc:name="syncAccountsBatch" />
		<exception-strategy ref="defaultChoiceExceptionStrategy"
			doc:name="Default Exception Strategy" />
	</flow>
	<batch:job name="syncAccountsBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:process-records>
			<batch:step name="foreachAccountInAGetAccountInBStep">
				<enricher source="#[payload]" target="#[recordVars['accountInB']]"
					doc:name="store result in record var 'accountInB'">
					<sfdc:query-single config-ref="SalesforceB"
						query="SELECT Id FROM Account WHERE Name = '#[payload['Name']]'"
						doc:name="query Account in Salesforce Instance B" />
				</enricher>
			</batch:step>
			<batch:step name="foreachAccountInAUpsertAccountInBStep">
				<expression-component doc:name="set ID for upsert"><![CDATA[if (recordVars['accountInB'] instanceof NullPayload) {
	// Remove ID as it is an insert
	payload.remove('Id')
} else {
	// Add target system ID as it is an update
    payload.put('Id', recordVars['accountInB']['Id'])
}]]></expression-component>
				<expression-component
					doc:name="remove unnecessary fields and map field types"><![CDATA[payload.remove('LastModifiedDate');
payload.remove('LastModifiedById');

// TODO - This is necessary due to: https://www.mulesoft.org/jira/browse/CLDCONNECT-1248
payload.put('NumberOfEmployees', Integer.parseInt(payload['NumberOfEmployees']) );]]></expression-component>
				<batch:commit size="200" doc:name="Batch Commit">
					<sfdc:upsert config-ref="SalesforceB"
						externalIdFieldName="Id" type="Account"
						doc:name="upsert Accounts in Salesforce Instance B">
                        <sfdc:objects ref="#[payload]"/>

					</sfdc:upsert>
				</batch:commit>
			</batch:step>
		</batch:process-records>
		<batch:on-complete>
			<json:object-to-json-transformer
				doc:name="transform BatchJobInstance to JSON" />
			<logger message="The SFDC Batch job has finished: #[payload]" level="INFO"
				doc:name="log 'Batch job has finished'" />
		</batch:on-complete>
	</batch:job>

	<flow name="processBQueueObjectsToBatchFlow">
		<jms:inbound-endpoint topic="A" connector-ref="Active_MQ"
			doc:name="JMS Topic A">
			<jms:jmsmessage-to-object-transformer />
		</jms:inbound-endpoint>

		<collection-aggregator timeout="1000"
			failOnTimeout="false" doc:name="Collection Aggregator" />
		<batch:execute name="dbSyncAccountsBatch" doc:name="dbSyncAccountsBatch" />
		<exception-strategy ref="defaultChoiceExceptionStrategy"
			doc:name="Default Exception Strategy" />
	</flow>

	<batch:job name="dbSyncAccountsBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:process-records>
			<batch:step name="foreachAccountInSalesforceGetAccountInDatabase">
				<enricher source="#[payload]" target="#[recordVars.account]"
					doc:name="Store payload into variable 'account'">
					<db:select config-ref="GenericDatabaseConnector"
						doc:name="query Account by matching name from Database">
                        <db:template-query-ref name="QueryAccount"/>
                        <db:in-param name="paramName" value="#[payload.Name]"/>

					</db:select>
				</enricher>


			</batch:step>
			<batch:step name="foreachAccountInSalesforceUpdateAccountInDatabase"
				accept-expression="#[recordVars['account'].size() &gt; 0]">
				<batch:commit size="100" doc:name="Batch Commit">
					<db:update config-ref="GenericDatabaseConnector"
						doc:name="update account in database" bulkMode="true">
                        <db:parameterized-query><![CDATA[UPDATE Account SET
AccountNumber = #[payload['AccountNumber']], 
Description = #[payload['Description']],  
NumberOfEmployees = #[payload['NumberOfEmployees']], 
LastModifiedDate = CURRENT_TIMESTAMP
WHERE Name = #[payload['Name']]]]></db:parameterized-query>





					</db:update>
				</batch:commit>
			</batch:step>
			<batch:step name="foreachAccountInSalesforceInsertAccountInDatabase"
				accept-expression="#[recordVars['account'].size() == 0]">
				<batch:commit size="100" doc:name="Batch Commit">
					<db:insert config-ref="GenericDatabaseConnector"
						doc:name="insert account in database" bulkMode="true">
                        <db:parameterized-query><![CDATA[INSERT INTO Account (
	AccountNumber,
	Description,
	Name,
	NumberOfEmployees,
	SalesforceId,
	LastModifiedById,
	LastModifiedDate
) VALUES (
	#[payload['AccountNumber']],
	#[payload['Description']],
	#[payload['Name']],
	#[payload['NumberOfEmployees']],
	#[payload['Id']],
	CURRENT_USER,
	CURRENT_TIMESTAMP
)]]></db:parameterized-query>




					</db:insert>
				</batch:commit>
			</batch:step>
		</batch:process-records>
		<batch:on-complete>

			<json:object-to-json-transformer
				doc:name="transform BatchJobInstance to JSON" />
			<logger message="The DB Batch job has finished: #[payload]" level="INFO"
				doc:name="log 'Batch job has finished'" />
		</batch:on-complete>
	</batch:job>

	<flow name="processCQueueObjectsToBatchFlow">
		<jms:inbound-endpoint topic="A" connector-ref="Active_MQ"
			doc:name="JMS Topic A">
			<jms:jmsmessage-to-object-transformer />
		</jms:inbound-endpoint>

		<collection-aggregator timeout="1000"
			failOnTimeout="false" doc:name="Collection Aggregator" />
		<batch:execute name="SAPsyncAccountsBatch" doc:name="SAPsyncAccountsBatch" />
		<exception-strategy ref="defaultChoiceExceptionStrategy"
			doc:name="Default Exception Strategy" />
	</flow>
	
	<batch:job name="SAPsyncAccountsBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:process-records>

			<batch:step name="foreachAccountInSalesforceGetAccountInSap">
				<enricher source="#[payload.isEmpty() ? NullPayload.getInstance() : payload[0]]" target="#[recordVars['sapCustomer']]"
					doc:name="store result in record var 'sapCustomer'">
                    <processor-chain doc:name="Processor Chain">
                        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="BAPI_CUSTOMER_FIND" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="Get Customer by Name">
                            <sap:definition><![CDATA[<BAPI_CUSTOMER_FIND type="function">
	<import>
		<MAX_CNT type="field" sapType="INT">0</MAX_CNT>
		<PL_HOLD type="field" sapType="CHAR" sapLength="1">X</PL_HOLD>
	</import>
  	<tables>
  	<SELOPT_TAB type="table">
		<table name="SELOPT_TAB">
			<row id="0">
				<TABNAME type="field"
					sapType="CHAR" sapLength="4">KNA1</TABNAME>
				<FIELDNAME type="field"
					sapType="CHAR" sapLength="5">NAME1</FIELDNAME>
				<FIELDVALUE type="field" 
					sapType="CHAR" sapLength="20">#[org.apache.commons.lang3.StringEscapeUtils.escapeXml(payload['Name'])]</FIELDVALUE>
			</row>
		</table>
		</SELOPT_TAB>
	</tables>
</BAPI_CUSTOMER_FIND>]]></sap:definition>




                        </sap:outbound-endpoint>
                        <data-mapper:transform config-ref="BAPI_CUSTOMER_FIND_to_Customer" doc:name="BAPI_CUSTOMER_FIND to Customer"/>
                    </processor-chain>
				</enricher>
			</batch:step>
            <batch:step name="forEachAccountInSapGetAccountGroup" accept-expression="!(recordVars['sapCustomer'] is NullPayload)">
                <enricher source="#[payload['AccountGroup']]" target="#[payload['AccountGroup']]" doc:name="store 'AccountGroup' to payload">
                    <processor-chain doc:name="Processor Chain">
                        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="CUSTOMER_GET_KTOKD" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="Get Account Group from SAP">
                            <sap:definition><![CDATA[<CUSTOMER_GET_KTOKD type="function">
	<import>
			<IV_KUNNR type="field" sapType="CHAR" sapLength="20">#[recordVars['sapCustomer']['Id']]</IV_KUNNR>
	</import>
</CUSTOMER_GET_KTOKD>
]]></sap:definition>





                        </sap:outbound-endpoint>
                        <data-mapper:transform config-ref="CUSTOMER_GET_KTOKD_to_KTOKD" doc:name="CUSTOMER_GET_KTOKD to AccountGroup"/>
                    </processor-chain>
                </enricher>
                <expression-component doc:name="Setup Properties for Update"><![CDATA[payload.put('MessageFunction', '005'); // Replace: This message replaces previous messages
payload.put('CustomerNumber', recordVars['sapCustomer']['CustomerNumber']);
]]></expression-component>
            </batch:step>
            <batch:step name="forEachNewAccountGetCustomerNumber" accept-expression="recordVars['sapCustomer'] is NullPayload">
                <enricher source="#[payload['CustomerNumber']]" target="#[payload['CustomerNumber']]" doc:name="store 'CustomerNumber' to payload">
                    <processor-chain doc:name="Processor Chain">
                        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="BAPI_CUSTOMER_GETINTNUMBER" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="Get Next Customer Number from SAP">
                            <sap:definition><![CDATA[<BAPI_CUSTOMER_GETINTNUMBER type="function">
	<import>
			<ACCOUNTGROUP type="field" sapType="CHAR" sapLength="20">${sap.default.accountGroup}</ACCOUNTGROUP>
	</import>
</BAPI_CUSTOMER_GETINTNUMBER>

]]></sap:definition>





                        </sap:outbound-endpoint>
                        <data-mapper:transform config-ref="BAPI_CUSTOMER_GETINTNUMBER_to_Customr_Number" doc:name="BAPI_CUSTOMER_GETINTNUMBER to Customr Number"/>
                    </processor-chain>
                </enricher>
                <expression-component doc:name="Setup Properties for Create"><![CDATA[payload.put('MessageFunction', '009'); // Original: First message for process
payload.put('AccountGroup', '${sap.default.accountGroup}');
]]></expression-component>
            </batch:step>
			<batch:step name="foreachAccountInSalesForceUpsertAccountInSapStep">
                <flow-ref name="commitAccountsFlow" doc:name="commitAccountsFlow"/>
			</batch:step>
		</batch:process-records>
		<batch:on-complete>
			<json:object-to-json-transformer
				doc:name="Transform BatchJobInstance to JSON" />
			<logger level="INFO" doc:name="Log 'Migration process has finished'"
				message="Migration process has finished: #[payload]" />
		</batch:on-complete>
	</batch:job>
    <flow name="commitAccountsFlow" >
        <logger message="Accounts to update/create: #[payload] .......... #[recordVars['sapCustomer']] ............. #[recordVars]" level="INFO" doc:name="Log Accounts to update/create"/>
        <data-mapper:transform config-ref="Salesforce_Account_to_DEBMAS01" doc:name="Salesforce Account to DEBMAS01"/>
        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="idoc" functionName="DEBMAS01" xmlVersion="2" outputXml="true"  responseTimeout="10000" doc:name="Upsert Customer in SAP"/>
        <logger message="Upsert result: #[payload]" level="INFO" doc:name="Log Result"/>
    </flow>
    
    <flow name="processDQueueObjectsToBatchFlow">
        <jms:inbound-endpoint topic="A" connector-ref="Active_MQ" doc:name="JMS Topic A"/>
        <collection-aggregator timeout="1000" failOnTimeout="false" doc:name="Collection Aggregator"/>
        <batch:execute name="WorkdaySyncAccountsBatch" doc:name="WorkdaysyncAccountsBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Default Exception Strategy"/>
    </flow>
    <batch:job name="WorkdaySyncAccountsBatch">
        <batch:process-records>
            <batch:step name="forEachAccountInSalesforceUpsertCustomerInWorkday">
                <data-mapper:transform config-ref="List_Account__To_PutCustomerRequestType" doc:name="List&lt;Account&gt; To PutCustomerRequestType"/>
                <wd-revenue:put-customer config-ref="Workday_Revenue_Management" doc:name="Upsert Customer"/>
                <logger message="wday response: #[payload]" level="INFO" doc:name="Logger"/>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
			<json:object-to-json-transformer
				doc:name="transform BatchJobInstance to JSON" />
			<logger message="The SFDC Batch job has finished: #[payload]" level="INFO"
				doc:name="log 'Batch job has finished'" />
		</batch:on-complete>
    </batch:job>
    <flow name="categoryLookupFlow">
        <scripting:component doc:name="get Workday categoryId">
            <scripting:script engine="Groovy"><![CDATA[switch (payload.Industry){
	case 'Biotechnology' : payload = ['categoryId' : '${category.biotechnology}']; break;
	case 'Finances' : payload = ['categoryId' : '${category.financialServices}']; break;
	case 'Hospitality' : payload = ['categoryId' : '${category.hospitality}']; break;
	case 'Manufacturing' : payload = ['categoryId' : '${category.manufacturing}']; break;
	case 'Technology' : payload = ['categoryId' : '${category.technology}']; break;

}]]></scripting:script>
        </scripting:component>

    </flow>
</mule>
